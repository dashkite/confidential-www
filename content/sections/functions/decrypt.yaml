title: decrypt
signature:
  - inputs: [ key, envelope ]
    output: plaintext
variables:
  key:
    type: "[`SymmetricKey`]() | [`SharedKey`]()"
    description: |
      Key to be used in the decryption operation.
  envelope:
    type: "[`Envelope`]()"
    description: |
      Container class for encryption products, `ciphertext` and `nonce`. As returned by [`encrypt`]().
  plaintext:
    type: "[`Plaintext`]()"
    description: |
      Container class for the plaintext resulting from decryption.

prose: |
  A [generic function]() accepting an encryption key and ciphertext to output a plaintext.  `decrypt` and its counterpart [`encrypt`]() form a pair of opposing operations.

  Panda-Confidential establishes a type system to determine your intention in a clear and error-free way.  That allows `decrypt`'s behavior to depend on the input key:
   - When given a [`SymmetricKey`](), `decrypt` uses [symmetric decryption]().
   - When given a [`SharedKey`](), `decrypt` uses authenticated, [asymmetric decryption]().

  Ciphertext is enclosed in the special container, [`Envelope`](), provided by [`encrypt`]().  If you wish to instanciate an `Envelope` from a serialized form, use the static method `Envelope.from` to do so.

  `decrypt` outputs an instance of [`Plaintext`](), a special container to type the plaintext product of decryptiong.  You may output the data in the format of your choice via the instance method `Plaintext.to`.

examples:
  - title: Symmetric Decryption
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {decrypt, Envelope} = confidential()
      import {keyLookup, read} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        serialized = read "greeting"
        envelope = Envelope.from "base64", serialized
        plaintext = await decrypt alice, envelope

        assert.equal (plaintext.to: "utf8"), "Hello, Alice!"
      ```
  - title: Asymmetric Decryption
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {SharedKey, decrypt, Envelope} = confidential()
      import {keyLookup, receive} from "my-library"

      do ->
        alice = keyLookup "Alice/public"
        bob = keyLookup "Bob/private"
        toBobFromAlice = SharedKey.create alice, bob
        serialized = receive "Bob"
        envelope = Envelope.from "base64", serialized
        plaintext = await decrypt toBobFromAlice, envelope

        assert.equal (plaintext.to: "utf8"), "Hello, Bob!"
      ```
