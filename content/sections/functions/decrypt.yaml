title: decrypt
signatures:
  - inputs: [ key, envelope ]
    output: plaintext
variables:
  key:
    type: "[`SymmetricKey`]() | [`SharedKey`]()"
    description: |
      Key to be used in the decryption operation.
  envelope:
    type: "[`Envelope`]()"
    description: |
      Type class for encryption products: `ciphertext` and `nonce`. Returned by [`encrypt`]().
  plaintext:
    type: "[`Plaintext`]()"
    description: |
      Type class for the plaintext resulting from decryption.

prose: |
  Decrypts a ciphertext, when provided the correct key.

  `decrypt` is a [generic function](), accepting an encryption key and ciphertext to return a plaintext.  `decrypt` and its counterpart [`encrypt`]() form a pair of opposing operations.

  Panda-Confidential establishes a type system to determine your intention in a clear and error-free way.  That allows `decrypt` behavior to depend on the input key:
   - When given a [`SymmetricKey`](), `decrypt` uses [symmetric decryption]().
   - When given a [`SharedKey`](), `decrypt` uses authenticated, [asymmetric decryption]().

  Ciphertext is enclosed in the type class [`Envelope`](), returned by [`encrypt`]().  If you wish to hydrate an `Envelope` from a serialized form, use the static method `Envelope.from` to do so.

  `decrypt` returns an instance of [`Plaintext`](), a type class that holds the plaintext product of decryption.  You may format the data of a `Plaintext` via the instance method `Plaintext.to`.

  If `decrypt` cannot decrypt a ciphertext (ex: the incorrect key is provided), it throws.

examples:
  - title: Symmetric Decryption
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {decrypt, Envelope} = confidential()
      import {keyLookup, read} from "my-library"

      do ->
        alice = keyLookup "Alice/private"

        serialized = read "greeting"
        envelope = Envelope.from "base64", serialized

        plaintext = await decrypt alice, envelope

        # You may format the plaintext with the instance method `to`.
        assert.equal (plaintext.to: "utf8"), "Hello, Alice!"
      ```
  - title: Asymmetric Decryption
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {SharedKey, decrypt, Envelope} = confidential()
      import {keyLookup, receive} from "my-library"

      do ->
        alice = keyLookup "Alice/public"
        bob = keyLookup "Bob/private"
        toBobFromAlice = SharedKey.create alice, bob

        serialized = receive "Bob"
        envelope = Envelope.from "base64", serialized

        plaintext = await decrypt toBobFromAlice, envelope

        # You may format the plaintext with the instance method `to`.
        assert.equal (plaintext.to: "utf8"), "Hello, Bob!"
      ```
