title: sign
signatures:
  - inputs: [ public-key, private-key, data ]
    output: [ declaration ]
  - inputs: [ private-key, public-key, data ]
    output: [ declaration ]
  - inputs: [ key-pair, data ]
    output: [ declaration ]
variables:
  key-pair:
    type: "[`SignatureKeyPair`]()"
    description: |
      The public and private keys with which to sign `data`.
  public-key:
    type: "[`PublicKey`]()"
    description: |
      The public key of the person wishing to sign `data`.
  private-key:
    type: "[`PrivateKey`]()"
    description: |
      The private key of the person wishing to sign `data`.
  data:
    type: "[`Plaintext`]() | [`Declaration`]()"
    description: |
      Data to be signed.
  declaration:
    type: "[`Declaration`]()"
    description: |
      Object with properties `data`, `signatures`, and `signatories`. Suitable for use with `verify`.

prose: |
  A [generic function]() accepting signing keys and data to output a digital signature.  `sign` and its counterpart [`verify`]() form a pair of opposing operations.

  Panda-Confidential establishes a key type system to determine your intention in a clear and error-free way.  That allows `sign` to accept either a [`SignatureKeyPair`]() or keys as individual arguments.

  > **Warning**: Encryption key pairs are incompatible with `sign` and will cause `sign` to throw.

  The output is a special container object, [`Declaration`](), and is expected by [`verify`]().  `Declaration` holds the original data, the public keys of the `signatories`, and the `signatures` that attest the integrity of the data and the irrefutablitiy of the given signatory.

  `sign` expects its input to be either an instance of `Plaintext` or `Declaration`:
    - `Declaration` is mentioned above.  It causes sign to append a signature to the existing lists.
    - `Plaintext` is a similar container that keeps generic data typed and formmated properly for `sign`.  To convert your data into an instance of `Plaintext`, use the static method `Plaintext.from`.

examples:
  - title: Single Signature
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {sign, Plaintext} = confidential()

      import {send, keyPairLookup} from "my-library"

      do ->
        alice = keyPairLookup "Alice/signature"
        data = Plaintext.from "utf8", "Hello, World!"
        declaration = sign alice, data

        # encode the signed data object itself
        send "Bob", declaration.to "base64"
      ```

  - title: Multiple Signatures
    content: |
      `sign` supports multiple signatories.  Provide a [`Declaration`]() object to the `data` argument and `sign` will append the signature to the `Declaration` in the output. The `signatures` property contains a list of signatures. The `signatories` property contains a list of the corresponding public keys.

      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {sign, Declaration} = confidential()
      import {receive, keyPairLookup} from "my-library"

      do ->
        # convert JSON to declaration
        greeting = Declaration.from "base64", receive "Bob"

        # add Bob's signature
        bob = keyPairLookup "Bob/signature"
        greeting = sign bob, greeting

        assert.equal greeting.signatures.length, 2
        assert.equal greeting.signatories.length, 2
      ```
