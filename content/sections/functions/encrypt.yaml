title: encrypt
signature:
  - inputs: [ key, nonce&, plaintext ]
    output: promise
variables:
  key:
    type: "[`SymmetricKey`]() | [`SharedKey`]()"
    description: |
      Key to be used in the encryption operation.
  nonce:
    type: "[`Uint8Array`]() | [`Buffer`]()"
    description: |
      Optional. A value to be combined with the plaintext before encryption. A nonceLength random nonce is generated if not supplied.
  plaintext:
    type: "[`Uint8Array`]() | [`Buffer`]()"
    description: The plaintext to be encrypted.
  promise:
    type: "[`Promise`]() &map; [`Envelope`]()"
    description: |
      Promise that resolves to an [`Envelope`], an object with properties ciphertext and nonce. Suitable for use with decrypt.

prose: |
  A [generic function]() accepting an encryption key and plaintext to output a ciphertext [`Envelope`]().  `encrypt` and its counterpart [`decrypt`]() form a pair of opposing operations.

  Panda-Confidential establishes a key type system to determine your intention in a clear and error-free way.  That allows `encrypt`'s behavior to depend on the input key:
   - When given a [`SymmetricKey`](), `encrypt` uses [symmetric encryption]() and requires a nonce `nacl.secretbox.nonceLength` bytes long if you provide `nonce`.
   - When given a [`SharedKey`](), `encrypt` uses authenticated, [asymmetric encryption]() and requires a nonce `nacl.box.nonceLength` bytes long if you provide `nonce`.

  > **Warning**: Signing key pairs are incompatible with `encrypt` and will cause `encrypt` to throw.

  Note that `input` must be a byte array, so use [`convert`]() to prepare your data for this function, if required.

  `encrypt` accepts an optional `nonce` as its second argument, or will generate its own from the [`randomBytes`]() interface if it is omitted.

  `encrypt` returns a promise that yields [`Envelope`](), a special container for the resultant ciphertext.  This container is expected by [`decrypt`]().

examples:
  - title: Symmetric Encryption
    note: |
      **Warning**: Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {encrypt} = confidential()
      import {keyLookup, write} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        plaintext = convert from: "utf8", to: "bytes", "Hello, Alice!"
        envelope = await encrypt alice, plaintext
        # serialize as needed with convert
        write "greeting", envelope.to "base64"
      ```

  - title: Asymmetric Encryption
    note: |
      **Warning:** Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {SharedKey, encrypt} = confidential()
      import {keyLookup, send} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        bob = keyLookup "Bob/public"
        fromAliceToBob = sharedKey.create alice, bob
        plaintext = convert {from: "utf8"}, "Hello, Bob!"
        envelope = await encrypt fromAliceToBob, plaintext
        send "Bob", envelope.to "base64"
      ```
