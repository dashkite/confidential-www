title: encrypt
signature:
  inputs: [ key, nonce&, plaintext ]
  output: envelope
  variables:
    key:
      type: "[`key.Symmetric`]() | [`key.Asymmetric`]()"
      description: |
        Key to be used in the encryption operation.
    nonce:
      type: "[`Uint8Array`]() | [`Buffer`]()"
      description: |
        A value combined with the plaintext before encryption. A nonceLength random nonce is generated if not supplied.
      plaintext:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]()"
        description: The plaintext to be encrypted.
      envelope:
        type: "[`Envelope`]()"
        description: |
          Object with properties ciphertext and nonce. Suitable for use with decrypt.

prose: |
  When given a [symmetric key](), [`encrypt`]() uses [symmetric encryption]().

  When given a [shared key](), [`encrypt`]() uses authenticated, [asymmetric encryption]().

  > **Warning**: Key pairs for signing do not work for encryption.

examples:
  - title: Symmetric Encryption
    note: |
      **Warning**: Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {encrypt} = confidential()
      import {keyLookup, write} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        envelope = await encrypt alice, "Hello, World!"
        # serialize as needed with convert
        write "greeting", convert to: "safe-base64", envelope
      ```

  - title: Asymmetric Encryption
    note: |
      **Warning:** Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {key, encrypt} = confidential()
      import {keyLookup} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        bob = keyLookup "Bob/public"
        fromAliceToBob = key.shared alice, bob
        envelope = await encrypt fromAliceToBob, "Hello, World!"
        send "Bob", convert to: "safe-base64", envelope
      ```
