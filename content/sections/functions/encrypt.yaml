title: encrypt
signature:
  - inputs: [ key, nonce&, plaintext ]
    output: envelope
variables:
  key:
    type: "[`SymmetricKey`]() | [`SharedKey`]()"
    description: |
      Key to be used in the encryption operation.
  nonce:
    type: "[`Uint8Array`]() | [`Buffer`]()"
    description: |
      A value to be combined with the plaintext before encryption. A nonceLength random nonce is generated if not supplied.
    plaintext:
      type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]()"
      description: The plaintext to be encrypted.
    envelope:
      type: "[`Envelope`]()"
      description: |
        Object with properties ciphertext and nonce. Suitable for use with decrypt.

prose: |
  A [generic function]() accepting an encryption key and plaintext to output a ciphertext [`Envelope`]().  `encrypt` and its counterpart [`decrypt`]() form a pair of opposing operations.

  Panda-Confidential establishes a key type system to determine your intention in a clear and error-free way.  That allows `encrypt`'s behavior to depend on the input key:
   - When given a [`SymmetricKey`](), `encrypt` uses [symmetric encryption]().
   - When given a [`SharedKey`](), `encrypt` uses authenticated, [asymmetric encryption]().

  > **Warning**: Signing key pairs are incompatible with `encrypt` and will cause `encrypt` to throw.

  The output ciphertext is enclosed in a special container, [`Envelope`](), and is expected by [`decrypt`]().

examples:
  - title: Symmetric Encryption
    note: |
      **Warning**: Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {encrypt} = confidential()
      import {keyLookup, write} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        envelope = await encrypt alice, "Hello, World!"
        # serialize as needed with convert
        write "greeting", convert to: "safe-base64", envelope
      ```

  - title: Asymmetric Encryption
    note: |
      **Warning:** Private keys should only be accessible to their owners.
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {key, encrypt} = confidential()
      import {keyLookup} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        bob = keyLookup "Bob/public"
        fromAliceToBob = key.shared alice, bob
        envelope = await encrypt fromAliceToBob, "Hello, World!"
        send "Bob", convert to: "base64", envelope
      ```
