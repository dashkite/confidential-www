title: encrypt
signature:
  inputs: [ key, nonce&, plaintext ]
  output: envelope
  variables:
    key:
      type: "[key.Symmetric][key-symetric] | [key.Asymmetric][key-asymmetric]"
      description: |
        Key to be used in the encryption operation.
    nonce:
      type: "[Uint8Array][uint8array] | [Buffer][buffer]"
      description: |
        A value combined with the plaintext before encryption. A nonceLength random nonce is generated if not supplied.
      plaintext:
        type: "string | [Uint8Array][uint8array] | [Buffer][buffer]"
        description: The plaintext to be encrypted.
      envelope:
        type: "[Envelope][envelope]"
        description: |
          Object with properties ciphertext and nonce. Suitable for use with decrypt.

prose: |
  When given a [symmetric key][key-symmetric], [encrypt][encrypt] uses [symmetric encryption][tweetnacl-secretbox].

  When given a [shared key][key-shared], [encrypt][encrypt] uses authenticated, [asymmetric encryption][tweetnacl-box].

examples:
  - title: Symmetric Encryption
    note: |
      **Warning**: Key pairs for signing do not work for encryption.
    content: |
      ```coffeescript
      import {confidential} from "panda-confidential"
      {encrypt} = confidential()
      import {keyLookup, write} from "my-library"

      do ->
        alice = keyLookup "Alice/private"
        envelope = await encrypt alice, "Hello, World!"
        # serialize as needed with convert
        write "greeting", convert to: "safe-base64", envelope
      ```
