title: convert
signature:
  - inputs: [ hints, input ]
    output: [ output ]

variables:
  hints:
    type: "[`Object`]()"
    description: |
      Describes the conversion to be applied to _input_. Contains the properties `from` and `to`.
  input:
    type: "[`Uint8Array`]() | [`Buffer`]() | [`String`]() | [`Object`]()"
    description: |
      The value to be converted.
  output:
    type: "[`Uint8Array`]() | [`Buffer`]() | [`String`]() | [`Object`]()"
    description: |
      The result of the conversion.

prose: |
  A utility function to manage data format conversion between a variety of targets.

  A conversion is specified by `hints`'s fields, `from` and `to`.  These identify the current and target encoding of `input`, respectively.

  #### Supported Formats
  - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
  - `utf8`: A [`String`]() with [UTF-8 encoding]()
  - `base64`: A [`String`]() with [Base64 encoding]()
  - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()
  - `object`: An [`Object`]().  Objects are transformed by using the native [`JSON`]() object's `stringify` and `parse` methods.

  #### Errors
  `convert` is meant to provide safe and correct format conversion for your data.  There are a number of checks in place that will throw errors if they fail:
  - Specifying an unsupported conversion
  - Failing to specify either `from` or `to`
  - Specifying the same value for `from` and `to`
  - Specifying a value for `from` that conflicts with the type of `input`. ex, specifying `bytes` when the input is a string


examples:
  - title: String Conversion
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {convert} = confidential()

      do ->
        assert.equal "Hello, World!",
          convert from: "base64", to: "utf8", "SGVsbG8sIFdvcmxkIQ=="

        assert.equal (Buffer.from "Hello, World!"),
          convert from: "utf8", to: "bytes" , "Hello, World!"

        assert.equal "Hello, World!",
          convert from: "bytes", to: "utf8", Buffer.from "Hello, World!"
      ```

  - title: Formatting Data for the API
    content: |
      The Panda-Confidential generics, ([`encrypt`](), [`decrypt`](), [`sign`](), and [`verify`]()) are purposefully agnostic to the content they process, be it a document, message, or image.  The API always operates on byte arrays, requiring you convert inputs into bytes and then dealing with byte array outputs.

      Any data formmatting is your responsibility, but Panda-Confidential provides `convert` to safely and correctly conduct formatting by requiring explicit formatting instructions via `hints`.

      Similiarly, types like [`Envelope`](), [`Declaration`], and the various keys use the `.to()` and `.from()` methods to safely conduct conversions based around their types.  See those classes for more information.

      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {encrypt, SharedKey, Envelope, decrypt, convert} = confidential()
      import {keyLookup} from "my-library"
      do ->
        # First, Alice creates a SharedKey for asymmetric encryption..
        alice = keyLookup "Alice/private"
        bob = keyLookup "Bob/public"
        fromAliceToBob = SharedKey.create alice, bob

        # Use convert to turn the message into a byte array...
        plaintext = convert from: "utf8", to: "bytes", "Hello, Bob!"
        envelope = await encrypt fromAliceToBob, plaintext

        # Use the Envelope method `to` to serialize.
        send "Bob", envelope.to "base64"

        # Later, with Bob on the recieving end....
        alice = keyLookup "Alice/public"
        bob = keyLookup "Bob/private"
        toBobFromAlice = SharedKey.create alice, bob
        serialized = receive "Bob"
        envelope = Envelope.from "base64", serialized
        plaintext = await decrypt toBobFromAlice, envelope

        # And use `convert` to encode the resulting plaintext.
        assert.equal (convert from: "bytes", to: "utf8", plaintext),  "Hello,
        Bob!"
      ```
