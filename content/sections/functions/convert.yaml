title: convert
signatures:
  - inputs: [ hint, input ]
    output: [ output ]

variables:
  hint:
    type: "[`Object`]()"
    description: |
      An object with the keys `from` and `to`.  Their values describe the conversion to be applied to _input_.
  input:
    type: "[`Uint8Array`]() | [`String`]()"
    description: |
      The value to be converted.
  output:
    type: "[`Uint8Array`]() | [`String`]()"
    description: |
      The result of the conversion.

prose: |
  Manages data format conversion between a variety of targets.

  A conversion is specified by the fields of `hint`, `from` and `to`.  These identify the current and target format of `input`, respectively.

  Typically, you will not need to use `convert` directly.  Panda-Confidential provides type classes (ex: [`Plaintext`](), [`Envelope`](), and [`Declaration`]()) with methods to manage data formatting.  Each class follows a convention to include the methods `from` and `to`, but internally, they all use `convert` to peform the conversion.

  #### Supported Formats
  - `bytes`: A byte array, specifically [`Uint8Array`]()
  - `utf8`: A [`String`]() with [UTF-8 encoding]()
  - `base64`: A [`String`]() with [Base64 encoding]()
  - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

  #### Errors
  `convert` is meant to provide safe and correct format conversion for your data.  There are a number of checks in place that will throw errors if they fail:
  - Specifying an unsupported conversion
  - Failing to specify either `from` or `to`
  - Specifying the same value for `from` and `to`
  - Specifying a value for `from` that conflicts with the type of `input`. ex, specifying `bytes` when the input is a string


examples:
  - title: String Conversion
    content: |
      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {convert} = confidential()

      do ->
        assert.equal "Hello, World!",
          convert from: "base64", to: "utf8", "SGVsbG8sIFdvcmxkIQ=="

        assert.equal (Buffer.from "Hello, World!"),
          convert from: "utf8", to: "bytes" , "Hello, World!"

        assert.equal "Hello, World!",
          convert from: "bytes", to: "utf8", Buffer.from "Hello, World!"
      ```

  - title: Formatting Data for the API
    content: |
      The Panda-Confidential generics (ex: [`encrypt`](), [`decrypt`](), [`sign`](), and [`verify`]()) are purposefully agnostic to the content they process, be it text or binary media.  The API always operates on byte arrays, requiring you convert inputs into bytes and then dealing with byte array outputs.

      Typically, you will not need to use `convert` directly.  Panda-Confidential provides type classes with formatting methods that use `convert` internally.

      Here is an example that uses these classes. Please see those class references for more information.


      ```coffeescript
      import assert from "assert"
      import {confidential} from "panda-confidential"
      {SharedKey, Plaintext, encrypt, Envelope, decrypt} = confidential()
      import {keyLookup} from "my-library"
      do ->
        # First, Alice creates a SharedKey for asymmetric encryption..
        alice = keyLookup "Alice/private"
        bob = keyLookup "Bob/public"
        fromAliceToBob = SharedKey.create alice, bob

        # Use the Plaintext static method to turn the message into a byte array
        plaintext = Plaintext.from "utf8", "Hello, Bob!"
        envelope = await encrypt fromAliceToBob, plaintext

        # Use the Envelope instance method `to` to serialize.
        send "Bob", envelope.to "base64"



        # Later, with Bob on the recieving end....
        alice = keyLookup "Alice/public"
        bob = keyLookup "Bob/private"
        toBobFromAlice = SharedKey.create alice, bob
        serialized = receive "Bob"

        # Use the Envelope static method `from` to hydrate a new Envelope
        envelope = Envelope.from "base64", serialized
        plaintext = await decrypt toBobFromAlice, envelope

        # Use Plaintext instance method `to` to encode the plaintext
        assert.equal (plaintext.to "utf8"), "Hello, Bob!"
      ```
