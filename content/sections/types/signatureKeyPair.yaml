title: SignatureKeyPair
prototype: "[`KeyPair`]()"
prose: |
  Key pair suitable for [digital signing]().

  > **Warning:** `SignatureKeyPair` is not suitable for signature.

  Because this type extends [`KeyPair`](), you may:
  - manage `SignatureKeyPair` serialization through the `to` and `from` methods.
  - check if this key pair is _any_ type of instanciated [`KeyPair`]() through the `isKind` method.

  This class adds to the method interface with:
  - `create`: static method to generate a key pair suitable for digitial signing
  - `isType`: static method type check specifically on `SignatureKeyPair`

properties: false
staticMethods:
  create:
    signature:
      - inputs: []
        output: signature-key-pair
    variables:
      signature-key-pair:
        isPromised: true
        type: "`SignatureKeyPair`"
        description: |
          Promise that resolves to an instance of `SignatureKeyPair`.
    prose: |
      Generates a new `SignatureKeyPair`.  Randomly generates a pair of algorithmically related keys using the [`randomBytes`]() interface.

  from:
    signature:
      - inputs: [ hint, data ]
        output: key-pair
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the input hint.
      data:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]()"
        description: |
          A representation of the data of a key-pair.
      key-pair:
        type: "[`SignatureKeyPair`]()"
        description: |
          The key-pair in an encoded form for transport or storage.
    prose: |
      Returns an instanciated `SignatureKeyPair` based on the value of `data`.

      `hint` tells `from` how convert the value into `SignatureKeyPair`'s internal reprentation.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.

      If `hint` conflicts with `data`'s type (ex: `data` is a byte array, while `hint` is "string"), `from` thows.

  isType:
    signature:
      - inputs: [ value ]
        output: is-signature-key-pair
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-signature-key-pair:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of [`SignatureKeyPair`](), `false` otherwise.
    prose: |
      Type checks on `value` to see if it is an instance of `SignatureKeyPair`.  Returns `true` or `false`.

instanceMethods: false
