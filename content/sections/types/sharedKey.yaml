title: SharedKey
prototype: "[`Key`]()"
prose: |
  A special key type used to perform [asymmetric encryption]().

  `SharedKey` is derived algorithmically from one [`PublicKey`]() (suitable for encryption) and one [`PrivateKey`]() (suitable for encryption).  That allows two people to, independently, generate the same _shared_ secret key and conduct authenticated encryption/decryption.

  > **Warning:** This key must remain secret for the encryption to be effective.

  `SharedKey` extends [`Key`](), so it inherits its inteface: (Please see that class for more details.)
  - `to`: instance method to return formatted internal data. `to` returns the key itself, in whichever format you request.
  - `isKind`: static method providing a boolean prototype chain check for `Key`

  `SharedKey` extends that interface with:
  - `create`: static method to generate an instance of `SharedKey` suitable for [asymmetric encryption]()
  - `from`: static method to hydrate an instance of `SharedKey` from data
  - `isType`: static method providing a boolean type-check for `SharedKey`

properties: false
staticMethods:
  create:
    signatures:
      - inputs: [public-key, private-key]
        output: shared-key
      - inputs: [private-key, public-key]
        output: shared-key
      - inputs: [key-pair]
        output: shared-key
    variables:
      public-key:
        type: "[`PublicKey`]()"
        description: |
          [`PublicKey`]() suitable for encryption.
      private-key:
        type: "[`PrivateKey`]()"
        description: |
          [`PrivateKey`]() suitable for encryption.
      key-pair:
        type: "[`EncryptionKeyPair`]()"
        description: |
          An [`EncryptionKeyPair`](), containing one [`PublicKey`]() and one [`PrivateKey`]() suitable for encryption.
      shared-key:
        type: "`SharedKey`"
        description: |
          Instance of [`SharedKey`](), derived from either the `public-key` and `private-key` or from the `key-pair`.
    prose: |
      Derives a new [`SharedKey`] by algorithmically combining `public-key` and `private-key`, or the `PublicKey` and `PrivateKey` of `key-pair`.

  isType:
    signatures:
      - inputs: [ value ]
        output: is-shared-key
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-shared-key:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of [`SharedKey`](), `false` otherwise.
    prose: |
      Type checks on `value` to see if it is an instance of `SharedKey`.  Returns `true` or `false`.

  from:
    signatures:
      - inputs: [ hint, data ]
        output: key
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the `from` conversion hint.
      data:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]()"
        description: |
          A data representation of a shared key.
      key:
        type: "[`SharedKey`]()"
        description: |
          Instance of [`SharedKey`](), hydrated by the input `data`.
    prose: |
      Hydrates an instance of `SharedKey` from given `data`.

      `hint` informs `from` how convert `data` into `SharedKey`'s internal reprentation.

      #### Supported Hints
      - `bytes`: A byte array, specifically [`Uint8Array`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.

      If `hint` conflicts with `data`'s type (ex: `data` is a byte array, while `hint` is "string"), `from` thows.

instanceMethods: false
