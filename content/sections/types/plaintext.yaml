title: Plaintext
prototype: false
prose: |
  The return value for [`decrypt`]() and the required input for [`encrypt`]()

  `Plaintext` holds the `plaintext` in the correct hint for [`encrypt`].

  `Plaintext` contains methods to assist managing this resource, summarized below.  Please see the relevant section for more details.

  - `to`: instance method to output the internal value in the given hint
  - `from`: static method to hydrate an instance of `Plaintext` from data
  - `isType`: static method providing a boolean type-check for `Plaintext`

properties:
  plaintext:
    type: "[`Uint8Array`]()"
    description: |
      The plaintext, properly formmated for [`encrypt`](), the counterpart to the ciphertext product.

staticMethods:
  isType:
    signature:
      - inputs: [ value ]
        output: is-plaintext
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-plaintext:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of `Plaintext`, `false` otherwise.
    prose: |
      Type check method to determine if the input `value` is an instance of `Plaintext`.  Returns `true` or `false`.

  from:
    signature:
      - inputs: [ hint, data ]
        output: plaintext
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the input hint.
      data:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]() | [`Object`]()"
        description: |
          A representation of the data of a plaintext.
      plaintext:
        type: "[`Plaintext`]()"
        description: |
          The plaintext in an encoded form for transport or storage.
    prose: |
      Returns an instanciated `Plaintext` based on the value of `data`.

      `hint` tells `from` how convert the value into `Plaintext`'s internal reprentation.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.

      If `hint` conflicts with `data`'s type (ex: `data` is a byte array, while `hint` is "string"), `from` thows.

instanceMethods:
  to:
    signature:
      - inputs: [ hint ]
        output: encoded-plaintext
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the output encoding.
      encoded-plaintext:
        type: "[`String`]() | [`Uint8Array`]()"
        description: |
          The plaintext in an encoded form for transport or storage.
    prose:  |
      Outputs this instance's value in the form specified in `hint`.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.
