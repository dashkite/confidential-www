title: Hash
prototype: false
prose: |
  The return value for [`hash`]().

  `Hash` is a wrapper for the [SHA-512]() hash of a document.

  `Hash` has helper methods to manage its data, summarized below. Please see the relevant section for more details.

  - `to`: instance method to return formatted internal data. `to` returns the hash itself, in whichever format you request.
  - `from`: static method to hydrate an instance of `Hash` from data
  - `isType`: static method providing a boolean type-check for `Hash`

properties:
  hash:
    type: "[`Uint8Array`]()"
    description: |
      The value of this hash.

staticMethods:
  isType:
    signatures:
      - inputs: [ value ]
        output: is-hash
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-hash:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of `Hash`, `false` otherwise.
    prose: |
      Type check method to determine if the input `value` is an instance of `Hash`.  Returns `true` or `false`.

  from:
    signatures:
      - inputs: [ hint, data ]
        output: hash
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the `from` conversion hint.
      data:
        type: "[`String`]() | [`Uint8Array`]()"
        description: |
          A data representation of a hash.
      hash:
        type: "[`Hash`]()"
        description: |
          Instance of [`Hash`](), hydrated by the input `data`.
    prose: |
      Hydrates an instance of `Hash` from given `data`.

      `hint` informs `from` how convert `data` into `Hash`'s internal reprentation.

      #### Supported Hints
      - `bytes`: A byte array, specifically [`Uint8Array`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.

      If `hint` conflicts with `data`'s type (ex: `data` is a byte array, while `hint` is "string"), `from` thows.

instanceMethods:
  to:
    signatures:
      - inputs: [ hint ]
        output: encoded-hash
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the `to` conversion hint.
      encoded-hash:
        type: "[`String`]() | [`Uint8Array`]()"
        description: |
          A data representation of a hash
    prose:  |
      Converts this instance's value into the form specified by `hint`.

      `Hash` is a simple wrapper for the given hash, so `to` returns the hash itself, in whichever format you request.

      #### Supported Hints
      - `bytes`: A byte array, specifically [`Uint8Array`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.
