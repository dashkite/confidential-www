title: Envelope
prototype: false
prose: |
  The return value for [`encrypt`]().

  `Envelope` organizes the `ciphertext` and `nonce` products of encryption and is expected by the [`decrypt`]() interface.

  You may manage `Envelope` serialization through this type's `to` and `from` methods.  You may confirm whether an entity is an instancated `Envelope` through this type's `isType` method.

properties:
  ciphertext:
    type: "[`Uint8Array`]()"
    description: |
      The ciphertext output from [`encrypt`], the counterpart to the original plaintext.
  nonce:
    type: "[`Uint8Array`]()"
    description: |
      nonce used to encrypt the plaintext

methods:
  isType:
    signature:
      - inputs: [ value ]
        output: is-envelope
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-envelope:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of [`Envelope`](), `false` otherwise.
    prose: |
      Type check method to determine if the input `value` is an instance of `Envelope`.  Returns `true` or `false`.

  to:
    signature:
      - inputs: [ format ]
        output: encoded-envelope
    variables:
      to:
        type: "[`String`]()"
        description: |
          name that specifies the output encoding.
      encoded-envelope:
        type: "[`String`]() | [`Uint8Array`]()"
        description: |
          The envelope in an encoded form for transport or storage.
    prose:  |
      Outputs this instance's value in the form specified in `format`.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()
      - `object`: An [`Object`] with fields containing values as they are stored internally, as byte arrays.

      Specifying an unsupported conversion throws.

  from:
    signature:
      - inputs: [ format, data ]
        output: envelope
    variables:
      to:
        type: "[`String`]()"
        description: |
          name that specifies the input format.
      data:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]() | [`Object`]()"
        description: |
          A representation of the data of a envelope.
      envelope:
        type: "[`Envelope`]()"
        description: |
          The envelope in an encoded form for transport or storage.
    prose: |
      Returns an instanciated `Delcaration` based on the value of `data`.

      `format` is a hint that tells `from` how convert the value into `Envelope`'s internal reprentation.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()
      - `object`: An [`Object`]

      Specifying an unsupported conversion throws.

      If `format` conflicts with `data`'s type (ex: `data` is a byte array, while `format` is "string"), `from` thows.
