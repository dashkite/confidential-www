title: Envelope
prototype: false
prose: |
  The return value for [`encrypt`]() and the required input for [`decrypt`]()

  `Envelope` organizes the `ciphertext` and `nonce` products of encryption.

  `Envelope` contains methods to assist managing this resource, summarized below.  Please see the relevant section for more details.

  - `to`: instance method to output the internal value in the given hint
  - `from`: static method to hydrate an instance of `Envelope` from data
  - `isType`: static method providing a boolean type-check for `Envelope`

properties:
  ciphertext:
    type: "[`Uint8Array`]()"
    description: |
      The ciphertext output from [`encrypt`](), the counterpart to the original plaintext.
  nonce:
    type: "[`Uint8Array`]()"
    description: |
      nonce used to encrypt the plaintext

staticMethods:
  isType:
    signatures:
      - inputs: [ value ]
        output: is-envelope
    variables:
      value:
        type: Value
        description: |
          A value to be tested.
      is-envelope:
        type: "[`Boolean`]()"
        description: |
          `true` if `value` is an instance of `Envelope`, `false` otherwise.
    prose: |
      Type check method to determine if the input `value` is an instance of `Envelope`.  Returns `true` or `false`.

  from:
    signatures:
      - inputs: [ hint, data ]
        output: envelope
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the input hint.
      data:
        type: "[`String`]() | [`Uint8Array`]() | [`Buffer`]()"
        description: |
          A representation of the data of a envelope.
      envelope:
        type: "[`Envelope`]()"
        description: |
          The envelope in an encoded form for transport or storage.
    prose: |
      Returns an instanciated `Envelope` based on the value of `data`.

      `hint` tells `from` how convert the value into `Envelope`'s internal reprentation.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.

      If `hint` conflicts with `data`'s type (ex: `data` is a byte array, while `hint` is "string"), `from` thows.

instanceMethods:
  to:
    signatures:
      - inputs: [ hint ]
        output: encoded-envelope
    variables:
      hint:
        type: "[`String`]()"
        description: |
          name that specifies the output encoding.
      encoded-envelope:
        type: "[`String`]() | [`Uint8Array`]()"
        description: |
          The envelope in an encoded form for transport or storage.
    prose:  |
      Outputs this instance's value in the form specified in `hint`.

      #### Supported Types
      - `bytes`: A byte array, specifically [`Uint8Array`]() or its equivalent in Node.js [`Buffer`]()
      - `utf8`: A [`String`]() with [UTF-8 encoding]()
      - `base64`: A [`String`]() with [Base64 encoding]()
      - `safe-base64`: A [`String`]() with [URL-Safe Base64 encoding]()

      Specifying an unsupported conversion throws.
