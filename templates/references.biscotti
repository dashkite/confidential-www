::
$references =
  #==============================
  # External Links
  #==============================
  "TweetNaCl.js": "https://github.com/dchest/tweetnacl-js"

  # Reference Links
  "`Function`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"
  "`Object`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"
  "`Number`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
  "`Integer`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger"
  "`Boolean`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"
  "`String`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"
  "`Date`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"
  "`Uint8Array`": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"
  "`Buffer`": "https://nodejs.org/api/buffer.html"

  "generic function": "https://en.wikipedia.org/wiki/Generic_programming"

  #========================================
  # Internal Links
  #========================================
  "`nacl`": "/api.html#property-nacl"

  "`confidential`": "/api.html#function-confidential"
  "`encrypt`": "/api.html#function-encrypt"
  "`decrypt`": "/api.html#function-decrypt"
  "`randomBytes`": "/api.html#function-randomBytes"

  "symmetric key": "/api.html#type-key-symmetric"
  "`key.Symmetric`": "/api.html#type-key-symmetric"
  "`key.Asymmetric`": "/api.html#type-key-asymmetric"


  "symmetric encryption": "/usage.html#symmetric-encryption-and-decryption"
  "symmetric decryption": "/usage.html#symmetric-encryption-and-decryption"
  "asymmetric encryption": "/usage.html#authenticated-asymmetric-encryption-and-decryption"
  "asymmetric decryption": "/usage.html#authenticated-asymmetric-encryption-and-decryption"


setLinks = (string) ->
  string.replace /\[(.+?)\]\(\)/g, (match, $1, offset, str) ->
    if $references[$1]?
      "[#{$1}](#{$references[$1]})"
    else
      "[#{$1}](#broken)"

    #splice str, offset, match.length, link
::
